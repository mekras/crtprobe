#!/bin/sh

caps_nmap=
caps_openssl=
caps_openssl_gost=

##
# Выводит подсказку по использованию утилиты
#
printUsage() {
  cat <<EOF

Инструмент для анализа возможностей по работе с сертификатами X.509 и TLS/SSL.

Использование:

    crtprobe <команда> [аргументы]

Команды для проверки локальной системы
--------------------------------------

crtprobe local:check

    Определяет возможности локальной системы. Запускается автоматически перед выполнением
    большинства других команд.

Команды для проверки удалённых серверов
---------------------------------------

crtprobe remote:info <сокет>

    Выводит сведения об удалённом узле.

crtprobe remote:test <сокет>

    Проверяет возможности по использованию TLS/SSL при работе с указанным узлом.

EOF
}

##
# Выводит сообщение указанным цветом
#
# @param $1 Имя цвета.
# @param $2 Шаблон сообщения.
# @param $… Аргументы для подстановки в шаблон.
#
cprint() {
  cprint_color=${1}
  shift
  cprint_message=${1}
  shift

  case "${cprint_color}" in
    'default') cprint_color='light_gray' ;;
    'error') cprint_color='light_red' ;;
    'info') cprint_color='cyan' ;;
    'success') cprint_color='light_green' ;;
    'warning') cprint_color='brown' ;;
  esac

  cprint_code=''
  case "${cprint_color}" in
    'black') cprint_code="\e[30m" ;;
    'red') cprint_code="\e[31m" ;;
    'green') cprint_code="\e[32m" ;;
    'brown') cprint_code="\e[33m" ;;
    'blue') cprint_code="\e[34m" ;;
    'magenta') cprint_code="\e[35m" ;;
    'cyan') cprint_code="\e[36m" ;;
    'light_gray') cprint_code="\e[37m" ;;
    'dark_gray') cprint_code="\e[1;30m" ;;
    'light_red') cprint_code="\e[1;31m" ;;
    'light_green') cprint_code="\e[1;32m" ;;
    'yellow') cprint_code="\e[1;33m" ;;
    'light_blue') cprint_code="\e[1;34m" ;;
    'light_magenta') cprint_code="\e[1;35m" ;;
    'light_cyan') cprint_code="\e[1;36m" ;;
    'white') cprint_code="\e[1;37m" ;;
  esac

  printf "${cprint_code}${cprint_message}\e[0m" "$*"
}

##
# Сообщает о неправильном использовании утилиты и прерывает выполнение
#
# @param $1 Сообщение об ошибке.
#
invalidUsage() {
  cprint error "Неправильный вызов команды. %s" "${1}" >&2
  echo 'Запустите crtprobe без аргументов чтобы получить подсказку.' >&2
  exit 1
}

##
# Проверяет возможность подключиться к узлу используя openssl -connect
#
# @param $1 Сокет для подключения.
# @param … Дополнительные ключи для openssl.
#
checkOpensslConnect() {
  openssl_connect_socket="${1}"
  shift
  if [ -z "${openssl_connect_socket}" ]; then
    invalidUsage 'Не указан сокет для подключения.'
  fi

  openssl_connect_buffer=$(mktemp --tmpdir crtprobe.XXXXX)
  if ! echo 'Q' | openssl s_client -verify_return_error -connect "${openssl_connect_socket}" "${*}" >"${openssl_connect_buffer}" 2>&1; then
    # См. https://kb.itzecurity.com/2015/08/ssltls-alert-protocol-alert-codes-pac.html
    if grep 'SSL alert number 70' "${openssl_connect_buffer}" >/dev/null; then
      cprint error "Версия протокола не поддерживается.\n"
    elif grep 'unable to get local issuer certificate' "${openssl_connect_buffer}" >/dev/null; then
      cprint error "Недоверенный сертификат.\n\n"
      cprint default "Некоторые возможные причины:\n"
      cprint default "• Не сервере не настроена полная цепочка сертификатов.\n"
      cprint default "• Используется самоподписанный сертификат, и для работы с узлом надо установить дополнительный сертификат.\n"
    elif grep 'no peer certificate available' "${openssl_connect_buffer}" >/dev/null; then
      cprint error "Сервер закрыл соединение.\n\n"
      cprint default "Сервер немедленно закрывает соединение после его установления, что препятствует любой дальнейшей коммуникации.\n"
      cprint default "Некоторые возможные причины:\n"
      cprint default "• Неправильная конфигурация сервера: сертификаты TLS/SSL могут быть просрочены или неправильно настроены.\n"
      cprint default "• Брандмауэр или политика безопасности могут принимать соединения, но сразу же их закрывать. Сервер может быть настроен на приём соединений только с определённых адресов IP или сетей.\n"
      cprint default "• Сервер может поддерживать только определённые версии TLS/SSL или шифры, которые не совместимы с настройками клиента OpenSSL.\n"
    else
      cprint error "Неизвестная ошибка:\n\n"
      cat "${openssl_connect_buffer}"
    fi
    return 1
  fi

  cprint success "Подключение успешно.\n"
}

##
# Определяет возможности локальной системы.
#
localCheck() {
  cprint info "Проверяю локальную систему…\n"

  cprint info '- openssl: '
  if command -v openssl >/dev/null; then
    cprint success "есть\n"
    caps_openssl=1

    cprint info '  - Поддержка алгоритмов ГОСТ: '
    if openssl engine -t gost >/dev/null 2>&1; then
      cprint success "есть\n"
      caps_openssl_gost=1
    else
      cprint warning "нет\n"
    fi
  else
    cprint error "не найдено\n"
  fi

  if command -v nmap >/dev/null; then
    caps_nmap=1
  fi
}

##
# Выводит сведения об удаленном узле
#
# @param $1 Имя узла.
# @param $2 Порт (по умолчанию 443).
#
remoteInfoCommand() {
  remote_info_socket="${1}"
  if [ -z "${remote_info_socket}" ]; then
    invalidUsage 'Не указано имя хоста.'
  fi
  remote_info_port="${2:-443}"

  localCheck

  if [ ${caps_nmap} ]; then
    nmap --script ssl-enum-ciphers -p "${remote_info_port}" "${remote_info_socket}"
  else
    cprint error "Для этого действия в системе должна быть установлена утилита nmap.\n"
  fi
}

##
# Проверяет возможности по использованию TLS/SSL при работе с указанным узлом.
#
# @param $1 Сокет для подключения.
#
remoteTestCommand() {
  remote_test_socket="${1}"
  if [ -z "${remote_test_socket}" ]; then
    invalidUsage 'Не указан сокет для подключения.'
  fi

  localCheck; echo

  cprint info "Проверяю возможности по взаимодействию локальной системы с «%s»…\n" "${remote_test_socket}"

  if [ ${caps_openssl} ]; then
    cprint info "\nTLS 1.0\n━━━━━━━\n"
    checkOpensslConnect "${remote_test_socket}" -tls1

    cprint info "\nTLS 1.1\n━━━━━━━\n"
    checkOpensslConnect "${remote_test_socket}" -tls1_1

    cprint info "\nTLS 1.2\n━━━━━━━\n"
    checkOpensslConnect "${remote_test_socket}" -tls1_2

    cprint info "\nTLS 1.3\n━━━━━━━\n"
    checkOpensslConnect "${remote_test_socket}" -tls1_3
  else
    cprint warning "Пропускаю проверки, требующие openssl.\n"
  fi
}

readonly command="${1}"

case ${command} in
  'local:check')
    localCheck
    ;;
  'remote:info')
    remoteInfoCommand "${2}"
    ;;
  'remote:test')
    remoteTestCommand "${2}:443"
    ;;
  *)
    printUsage
    ;;
esac
